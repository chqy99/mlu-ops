/*************************************************************************
 * Copyright (C) [2022] by Cambricon, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *************************************************************************/
#include "add.h"

#include "kernels/binary_op/binary_op_3pipeline.h"
#include "kernels/kernel.h"
#include "kernels/debug.h"
#include "core/logging.h"

__nram__ char nram_buffer[MAX_NRAM_SIZE];

template <typename T>
__mlu_func__ void get3OffsetAddFast(int32_t &nram_limit, int32_t &pong_x,
                                    int32_t &pong_y, T *&nram_x, T *&nram_y,
                                    T *&nram_aux1, T *&nram_aux2, T *&nram_aux3,
                                    char *nram_buffer) {

}

template <typename T>
__mlu_func__ void computeAddFast(
  T *nram_x, T *nram_y, T *nram_aux1, T *nram_aux2,
  T *nram_aux3, int32_t actual_num, int32_t deal_num) {

}

BINARY_OP_3PIPELINE_IMPLE(Add, float, Fast);

void MLUOP_WIN_API
KernelAdd(const cnrtDim3_t k_dim, const cnrtFunctionType_t k_type,
          const cnrtQueue_t queue, const float *x,
          const float *y, const int32_t element_num,
          const float alpha, float *output) {
  MLUBlockKernel3StagePipelineAddfloatFast<<<k_dim, k_type, queue>>>(
    x, y, output, element_num);
}